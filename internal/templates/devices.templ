package templates

import (
	"context"
	"io"
	"strconv"
	"github.com/softsrv/brewferring/internal/models"
)

type DevicesProps struct {
	Devices []models.Device
}

func Devices(devices []models.Device) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		props := DevicesProps{
			Devices: devices,
		}
		return DevicesTemplate(props).Render(ctx, w)
	})
}

templ DevicesTemplate(props DevicesProps) {
	@Base() {
			@Navbar()
			<div class="container mx-auto px-4 py-8">
				<div class="flex justify-between items-center mb-8">
					<h1 class="text-3xl font-bold">Devices</h1>
					<button class="btn btn-primary" onclick="document.getElementById('create-device-modal').showModal()">Create Device</button>
				</div>

				<div class="overflow-x-auto">
					<table class="table w-full">
						<thead>
							<tr>
								<th>Name</th>
								<th>Actions</th>
							</tr>
						</thead>
						<tbody>
							for _, device := range props.Devices {
								<tr>
									<td>{device.Name}</td>
									<td>
										<button class="btn btn-sm btn-error" hx-delete={"/devices/" + strconv.FormatInt(int64(device.ID), 10)} hx-target="closest tr">Delete</button>
									</td>
								</tr>
							}
						</tbody>
					</table>
				</div>
			</div>

			<dialog id="create-device-modal" class="modal">
				<div id="create-device-swap" class="modal-box w-fit">
					<h3 class="font-bold text-lg mb-4">Create Device</h3>
					<form id="create-device-form" method="POST" hx-post="/devices" hx-target="#create-device-swap" hx-on::before-swap="this.reset()">
						<div>
							<label class="input w-fit">
								<span class="label">Name</span>
								<input type="text" name="name" maxlength="50"  required/>
							</label>
						</div>
						<div class="modal-action">
							<button type="submit" class="btn btn-primary">Create</button>
							<button type="button" class="btn" onclick="document.getElementById('create-device-modal').close()">Cancel</button>
						</div>
					</form>
				</div>
			</dialog>

			<script>
				async function deleteDevice(id) {
					if (!confirm('Are you sure you want to delete this device?')) {
						return;
					}

					try {
						const response = await fetch(`/devices/${id}`, {
							method: 'DELETE'
						});

						if (!response.ok) {
							throw new Error('Failed to delete device');
						}

						window.location.reload();
					} catch (error) {
						alert('Failed to delete device: ' + error.message);
					}
				}

				function copyToClipboard(text) {
					navigator.clipboard.writeText(text).then(() => {
						alert('Token copied to clipboard!');
					}).catch(err => {
						console.error('Failed to copy text: ', err);
					});
				}
			</script>
	}
}
