package templates

import (
	"context"
	"io"
	"strconv"
	"time"

	"github.com/softsrv/brewferring/internal/models"
	"github.com/softsrv/brewferring/internal/provider"
)

type SchedulersProps struct {
	Schedulers []models.Scheduler
	Products   []provider.Product

}

func Schedulers(schedulers []models.Scheduler) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		props := SchedulersProps{
			Schedulers: schedulers,
		}
		return SchedulersTemplate(props).Render(ctx, w)
	})
}

templ SchedulersTemplate(props SchedulersProps) {
	@Base() {
		@Navbar()
			<div class="container mx-auto px-4 py-8">
				<div class="flex justify-between items-center mb-8">
					<h1 class="text-3xl font-bold">Schedulers</h1>
					<button class="btn btn-primary" onclick="document.getElementById('create-scheduler-modal').showModal()">Create Scheduler</button>
				</div>

				<div class="overflow-x-auto">
					<table class="table w-full">
						<thead>
							<tr>
								<th>Name</th>
								<th>Details</th>
								<th>Actions</th>
							</tr>
						</thead>
						<tbody>
							for _, scheduler := range props.Schedulers {
								<tr>
									<td>{scheduler.Name}</td>

									<td>
										if time.Time(scheduler.OrderDate).IsZero(){
											Threshold: {strconv.FormatFloat(scheduler.Threshold, 'f', 1, 64)}
										} else {
											Date: {time.Time(scheduler.OrderDate).Format("2006-01-02")}
										}
									</td>
									<td>
										<button class="btn btn-sm btn-error" hx-delete={"/schedulers/" + strconv.FormatInt(int64(scheduler.ID), 10)} hx-target="closest tr">Delete</button>
									</td>
								</tr>
							}
						</tbody>
					</table>
				</div>
			</div>

			<dialog id="create-scheduler-modal" class="modal">
				<div id="create-scheduler-swap" class="modal-box">
					<h3 class="font-bold text-lg mb-4">Create Scheduler</h3>
					<form id="create-scheduler-form" onsubmit="createScheduler(event)" class="space-y-4">
						<!-- Name Field -->
						<div class="form-control">
							<label class="label">
								<span class="label-text">Name</span>
							</label>
							<input type="text" name="name" class="input input-bordered w-full" required />
						</div>

						<!-- Type Field -->
						<div class="form-control">
							<label class="label">
								<span class="label-text">Type</span>
							</label>
							<select name="type" class="select select-bordered w-full" onchange="toggleSchedulerFields(this.value)" required>
								<option value="device">Device-based</option>
								<option value="date">Date-based</option>
							</select>
						</div>

						<!-- Threshold Field -->
						<div class="form-control" id="threshold-field">
							<label class="label">
								<span class="label-text">Threshold</span>
							</label>
							<input type="number" name="threshold" class="input input-bordered w-full" step="0.1" required />
						</div>

						<!-- Date Field (hidden initially) -->
						<div class="form-control hidden" id="date-field">
							<label class="label">
								<span class="label-text">Date</span>
							</label>
							<input type="date" name="date" class="input input-bordered w-full" />
						</div>

						<!-- Action Buttons -->
						<div class="modal-action flex justify-between space-x-4">
							<button type="button" class="btn btn-primary w-1/2" hx-post="/schedulers" hx-target="#create-scheduler-swap">Create</button>
							<button type="button" class="btn w-1/2" onclick="document.getElementById('create-scheduler-modal').close()">Cancel</button>
						</div>
					</form>

				</div>
			</dialog>

			<script>
				function toggleSchedulerFields(type) {
					const thresholdField = document.getElementById('threshold-field');
					const dateField = document.getElementById('date-field');
					const thresholdInput = document.querySelector('input[name="threshold"]');
					const dateInput = document.querySelector('input[name="date"]');

					if (type === 'device') {
						thresholdField.classList.remove('hidden');
						dateField.classList.add('hidden');
						thresholdInput.required = true;
						dateInput.required = false;
					} else {
						thresholdField.classList.add('hidden');
						dateField.classList.remove('hidden');
						thresholdInput.required = false;
						dateInput.required = true;
					}
				}

				async function deleteScheduler(id) {
					if (!confirm('Are you sure you want to delete this scheduler?')) {
						return;
					}

					try {
						const response = await fetch(`/api/schedulers?id=${id}`, {
							method: 'DELETE'
						});

						if (!response.ok) {
							throw new Error('Failed to delete scheduler');
						}

						window.location.reload();
					} catch (error) {
						alert('Failed to delete scheduler: ' + error.message);
					}
				}
			</script>

	}
}
